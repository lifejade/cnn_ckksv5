package scaleinv

import (
	"fmt"
	"math"
	"math/big"

	"github.com/tuneinsight/lattigo/v5/core/rlwe"
	"github.com/tuneinsight/lattigo/v5/he/hefloat"
)

type ScaleContext struct {
	Encoder_   *hefloat.Encoder
	Encryptor_ *rlwe.Encryptor
	Decryptor_ *rlwe.Decryptor
	Eval_      *hefloat.Evaluator
	Params_    hefloat.Parameters
}

func DecryptPrint(params hefloat.Parameters, ciphertext *rlwe.Ciphertext, decryptor *rlwe.Decryptor, encoder *hefloat.Encoder) {

	N := 1 << params.LogN()
	n := N / 2
	message := make([]complex128, n)
	encoder.Decode(decryptor.DecryptNew(ciphertext), message)

	fmt.Println()
	fmt.Printf("Level: %d (logQ = %d)\n", ciphertext.Level(), params.LogQLvl(ciphertext.Level()))
	fmt.Printf("Scale: 2^%f\n", ciphertext.LogScale())
	fmt.Printf("Values: %6.10f %6.10f %6.10f %6.10f %6.10f...\n", message[0], message[1], message[2], message[3], message[4])

	// max, min
	max, min := 0.0, 1.0
	for _, v := range message {
		if max < real(v) {
			max = real(v)
		}
		if min > real(v) {
			min = real(v)
		}
	}

	fmt.Println("Max, Min value: ", max, " ", min)
	fmt.Println()

	return

}

func MultByConstDoubleNew(ctxtIn *rlwe.Ciphertext, constVal float64, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator) (ctxtOut *rlwe.Ciphertext) {

	n := params.LogN() - 1

	constVec := make([]complex128, n)
	for i := 0; i < n; i++ {
		constVec[i] = complex(constVal, 0.0)
	}
	plain := hefloat.NewPlaintext(params, ctxtIn.Level())
	plain.Scale = ctxtIn.Scale
	encoder.Encode(constVec, plain)
	ctxtOut, _ = evaluator.MulNew(ctxtIn, plain)

	return ctxtOut
}
func MultByConstDouble(ctxtIn *rlwe.Ciphertext, ctxtOut *rlwe.Ciphertext, constVal float64, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator) {

	n := params.LogN() - 1

	constVec := make([]complex128, n)
	for i := 0; i < n; i++ {
		constVec[i] = complex(constVal, 0.0)
	}
	plain := hefloat.NewPlaintext(params, ctxtIn.Level())
	plain.Scale = ctxtIn.Scale
	encoder.Encode(constVec, plain)
	evaluator.Mul(ctxtIn, plain, ctxtOut)

}

func MultByConstVecTarget(cipher *rlwe.Ciphertext, constVec interface{}, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator, targetScale float64) (res *rlwe.Ciphertext) {

	cipher_scale := math.Pow(2, cipher.LogScale())
	level := cipher.Level()
	tempint := new(big.Int)
	tempint.Div(params.RingQ().ModulusAtLevel[level], params.RingQ().ModulusAtLevel[level-1])
	tempfloat := new(big.Float).SetInt(tempint)
	tmp, _ := tempfloat.Float64()
	scale := tmp * targetScale / cipher_scale

	plain := hefloat.NewPlaintext(params, cipher.Level())
	plain.Scale = rlwe.NewScale(scale)
	encoder.Encode(constVec, plain)
	res, _ = evaluator.MulNew(cipher, plain)

	return res
}

func AddScaleInv(cipher0, cipher1, res *rlwe.Ciphertext, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator) {

	if cipher0.Level() < cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())

		level1 := cipher1.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level1], params.RingQ().ModulusAtLevel[level1-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()
		scale := scale0 / scale1 * tmp
		n := params.LogN() - 1
		values1 := make([]complex128, n)
		for i := range values1 {
			values1[i] = 1.0
		}

		// scaler
		scaler := hefloat.NewPlaintext(params, cipher1.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values1, scaler)
		temp, _ := evaluator.MulRelinNew(cipher1, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher1.Level()-cipher0.Level()-1)
		evaluator.Add(cipher0, temp, res)

	} else if cipher0.Level() > cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())
		level0 := cipher0.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level0], params.RingQ().ModulusAtLevel[level0-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()

		scale := scale1 / scale0 * tmp
		n := params.LogN() - 1
		values0 := make([]complex128, n)
		for i := range values0 {
			values0[i] = 1.0
		}

		// scaler
		scaler := hefloat.NewPlaintext(params, cipher0.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values0, scaler)
		temp, _ := evaluator.MulRelinNew(cipher0, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher0.Level()-cipher1.Level()-1)
		evaluator.Add(cipher1, temp, res)

	} else {
		evaluator.Add(cipher0, cipher1, res)
	}

}
func AddScaleInvNew(cipher0, cipher1 *rlwe.Ciphertext, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator) (res *rlwe.Ciphertext) {

	if cipher0.Level() < cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())

		level1 := cipher1.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level1], params.RingQ().ModulusAtLevel[level1-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()
		scale := scale0 / scale1 * tmp
		n := params.LogN() - 1
		values1 := make([]complex128, n)
		for i := range values1 {
			values1[i] = 1.0
		}

		// scaler
		scaler := hefloat.NewPlaintext(params, cipher1.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values1, scaler)
		temp, _ := evaluator.MulRelinNew(cipher1, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher1.Level()-cipher0.Level()-1)
		res, _ = evaluator.AddNew(cipher0, temp)

	} else if cipher0.Level() > cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())
		level0 := cipher0.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level0], params.RingQ().ModulusAtLevel[level0-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()

		scale := scale1 / scale0 * tmp
		n := params.LogN() - 1
		values0 := make([]complex128, n)
		for i := range values0 {
			values0[i] = 1.0
		}

		// scaler
		scaler := hefloat.NewPlaintext(params, cipher0.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values0, scaler)
		temp, _ := evaluator.MulRelinNew(cipher0, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher0.Level()-cipher1.Level()-1)
		res, _ = evaluator.AddNew(cipher1, temp)

	} else {
		res, _ = evaluator.AddNew(cipher0, cipher1)
	}

	return res

}

func MultScaleInv(cipher0, cipher1, res *rlwe.Ciphertext, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator) {

	if cipher0.Level() < cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())

		level1 := cipher1.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level1], params.RingQ().ModulusAtLevel[level1-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()
		scale := scale0 / scale1 * tmp
		n := params.LogN() - 1
		values1 := make([]complex128, n)
		for i := range values1 {
			values1[i] = 1.0
		}

		// scalar
		scaler := hefloat.NewPlaintext(params, cipher1.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values1, scaler)
		temp, _ := evaluator.MulRelinNew(cipher1, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher1.Level()-cipher0.Level()-1)
		evaluator.MulRelin(cipher0, temp, res)

	} else if cipher0.Level() > cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())

		level0 := cipher0.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level0], params.RingQ().ModulusAtLevel[level0-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()
		scale := scale1 / scale0 * tmp
		n := params.LogN() - 1
		values0 := make([]complex128, n)
		for i := range values0 {
			values0[i] = 1.0
		}

		// scalar
		scaler := hefloat.NewPlaintext(params, cipher0.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values0, scaler)
		temp, _ := evaluator.MulRelinNew(cipher0, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher0.Level()-cipher1.Level()-1)
		evaluator.MulRelin(cipher1, temp, res)

	} else {
		evaluator.MulRelin(cipher0, cipher1, res)
	}

}
func MultScaleInvNew(cipher0, cipher1 *rlwe.Ciphertext, params hefloat.Parameters, encoder *hefloat.Encoder, evaluator *hefloat.Evaluator) (res *rlwe.Ciphertext) {

	if cipher0.Level() < cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())

		level1 := cipher1.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level1], params.RingQ().ModulusAtLevel[level1-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()
		scale := scale0 / scale1 * tmp
		n := params.LogN() - 1
		values1 := make([]complex128, n)
		for i := range values1 {
			values1[i] = 1.0
		}

		// scalar
		scaler := hefloat.NewPlaintext(params, cipher1.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values1, scaler)
		temp, _ := evaluator.MulRelinNew(cipher1, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher1.Level()-cipher0.Level()-1)
		res, _ = evaluator.MulRelinNew(cipher0, temp)

	} else if cipher0.Level() > cipher1.Level() {

		scale0 := math.Pow(2, cipher0.LogScale())
		scale1 := math.Pow(2, cipher1.LogScale())

		level0 := cipher0.Level()
		tempint := new(big.Int)
		tempint.Div(params.RingQ().ModulusAtLevel[level0], params.RingQ().ModulusAtLevel[level0-1])

		tempfloat := new(big.Float).SetInt(tempint)
		tmp, _ := tempfloat.Float64()
		scale := scale1 / scale0 * tmp
		n := params.LogN() - 1
		values0 := make([]complex128, n)
		for i := range values0 {
			values0[i] = 1.0
		}

		// scalar
		scaler := hefloat.NewPlaintext(params, cipher0.Level())
		scaler.Scale = rlwe.NewScale(scale)
		encoder.Encode(values0, scaler)
		temp, _ := evaluator.MulRelinNew(cipher0, scaler)

		evaluator.Rescale(temp, temp)
		evaluator.DropLevel(temp, cipher0.Level()-cipher1.Level()-1)
		res, _ = evaluator.MulRelinNew(cipher1, temp)

	} else {
		res, _ = evaluator.MulRelinNew(cipher0, cipher1)
	}

	return res

}
func PrintErr(err error) {
	if err != nil {
		fmt.Println(err)
	}
}
